// public static void main(String[] args) {
    //     Process a1= new Process("p1", 0, 4, 0, 7);
    //     Process a2= new Process("p2", 4, 7, 6, 9);
    //     // Process a3= new Process("p3", 5, 3, 11, 4);
    //     // Process a4= new Process("p4", 15, 6, 4, 6);
    //     //Process a5= new Process("p5", 12, 0, 5, 3);

    //     // Process a1= new Process("p1", 0, 17, 4, 7);
    //     // Process a2= new Process("p2", 2, 6, 7, 9);
    //     // Process a3= new Process("p3", 5, 11, 3, 4);
    //     // Process a4= new Process("p4", 15, 4, 6, 6);


    //     // Process a1= new Process("p1", 0, 5, 5, 7);
    //     // Process a2= new Process("p2", 0, 2, 4, 9);
    //     // Process a3= new Process("p3", 5, 8, 5, 4);
    //     // Process a4= new Process("p4", 10, 5, 1, 6);
    //     // Process a5= new Process("p5", 3, 7, 0, 3);

    //     LinkedList<Process> queue = new LinkedList<>();
    //     queue.addLast(a1);
    //     queue.addLast(a2);
    //     //queue.addLast(a3);
    //     //queue.addLast(a4);
    //     //queue.addLast(a5);

    //     // Scheduler rr = new RRscheduler();
    //     // rr.startScheduler(new LinkedList<Process>(queue), 0);

    //     // Scheduler ps = new Priorityscheduler();
    //     // ps.startScheduler(new LinkedList<Process>(queue), 0);

    //     // Scheduler SJF = new SJFscheduler();
    //     // SJF.startScheduler(new LinkedList<Process>(queue), 0);

    //     Scheduler AG = new AGscheduler();
    //     AG.startScheduler(new LinkedList<Process>(queue),0);
    // }


    //Collections.sort(queue, Comparator.comparingInt(obj -> obj.getArrivalTime()));

// Collections.sort(queue, new Comparator<Process>() {     //sorts by arrival and priority
//     @Override
//     public int compare(Process o1, Process o2) {
//         if(o1.getArrivalTime()==o2.getArrivalTime())
//             return o1.getPriority()-o2.getPriority();
//         return  o1.getArrivalTime()-o2.getArrivalTime();
//     }
// })